#!/bin/bash

# Colors
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
CYAN="\033[1;36m"
RESET="\033[0m"

# Banner
banner() {
  clear
  echo -e "${RED}"
  echo "██╗    ██╗██╗███████╗██╗       ██████╗██████╗  █████╗  ██████╗██╗  ██╗███████╗██████╗ "
  echo "██║    ██║██║██╔════╝██║      ██╔════╝██╔══██╗██╔══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗"
  echo "██║ █╗ ██║██║███████╗██║      ██║     ██████╔╝███████║██║     █████╔╝ █████╗  ██████╔╝"
  echo "██║███╗██║██║╚════██║██║      ██║     ██╔═══╝ ██╔══██║██║     ██╔═██╗ ██╔══╝  ██╔══██╗"
  echo "╚███╔███╔╝██║███████║███████╗╚██████╗██║     ██║  ██║╚██████╗██║  ██╗███████╗██║  ██║"
  echo " ╚══╝╚══╝ ╚═╝╚══════╝╚══════╝ ╚═════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝"
  echo -e "${RESET}"
  echo -e "${CYAN}                  >>> WiFi Cracker Simulator v2.0 <<<${RESET}"
  echo ""
}

# WiFi Scan
wifi_scan() {
  echo -e "${CYAN}[*] Scanning for nearby WiFi networks...${RESET}"
  sleep 2
  echo -e "${YELLOW}Found networks:${RESET}"
  echo "1) CoffeeShop_WiFi (WPA2)"
  echo "2) MyHome_5G (WPA3)"
  echo "3) FreeAirportWiFi (Open)"
  echo "4) Neighbor_WiFi (WEP)"
  echo ""
  back_to_menu
}

# Brute Force
brute_force() {
  echo -e "${RED}[*] Starting brute force on target WiFi...${RESET}"
  sleep 2
  for i in {1..5}; do
    echo "Trying password attempt $i..."
    sleep 1
  done
  echo -e "${GREEN}Password cracked: hunter123${RESET}"
  echo "=== Brute Force Log $(date) ===" >> brute.log
  echo "Password cracked: hunter123" >> brute.log
  back_to_menu
}

# System Info
system_info() {
  echo -e "${YELLOW}[*] Gathering system info...${RESET}"
  echo "OS: $(uname -o)"
  echo "Kernel: $(uname -r)"
  echo "User: $USER"
  echo "Uptime: $(uptime -p)"
  back_to_menu
}

# Pro Mode
pro_mode() {
  echo -e "${RED}!!! WARNING: PRO MODE ACTIVATED !!!${RESET}"
  echo "Generating high-intensity logs... (type 'stop.log' to stop)"
  echo "=== Pro Mode Log $(date) ===" >> pro.log
  while true; do
    echo "[PRO] $(date) :: Injecting packets..."
    echo "[PRO] $(date) :: Injecting packets..." >> pro.log
    read -t 0.2 input
    if [[ $input == "stop.log" ]]; then
      echo "Pro Mode stopped."
      break
    fi
  done
  back_to_menu
}

# DDoS Attack (simulated)
ddos_attack() {
  clear
  echo -e "${RED}[*] Starting DDoS attack...${RESET}"
  echo ""
  read -p "Enter target IP or URL: " target
  echo ""
  echo -e "${YELLOW}[*] Launching flood on $target ... Type 'stop.ddos' to stop.${RESET}"
  echo "=== DDoS Simulation Session $(date) ===" >> ddos.log
  
  count=0
  while true; do
    packet_size=$((RANDOM % 1500 + 64))
    port=$((RANDOM % 65535))
    line="[ATTACK] Sent $packet_size bytes to $target:$port | Total packets: $count"
    echo "$line"
    echo "$line" >> ddos.log
    ((count++))
    read -t 0.1 input
    if [[ $input == "stop.ddos" ]]; then
      echo "DDoS Simulation stopped."
      break
    fi
  done
  back_to_menu
}

# View Logs
view_logs() {
  echo -e "${CYAN}[*] Available logs:${RESET}"
  ls *.log 2>/dev/null || echo "No logs found."
  back_to_menu
}

# Back to Menu helper
back_to_menu() {
  echo ""
  echo -e "${GREEN}1) Back to Menu${RESET}"
  echo -e "${RED}0) Exit${RESET}"
  read -p "Choose: " back
  [[ $back == 0 ]] && exit
  menu
}

# Menu
menu() {
  banner
  echo "1) WiFi Scan"
  echo "2) Brute Force"
  echo "3) System Info"
  echo "4) Pro Mode"
  echo "5) DDoS Attack"
  echo "9) View Saved Logs"
  echo "0) Exit"
  echo ""
  read -p "Choose an option: " choice
  case $choice in
    1) wifi_scan ;;
    2) brute_force ;;
    3) system_info ;;
    4) pro_mode ;;
    5) ddos_attack ;;
    9) view_logs ;;
    0) exit ;;
    *) echo "Invalid choice!"; sleep 1; menu ;;
  esac
}

# Start
menu
