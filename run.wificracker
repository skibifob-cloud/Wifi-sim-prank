#!/data/data/com.termux/files/usr/bin/env python3
import os, sys, time, random, string
from datetime import datetime

# ------------------ SETUP ------------------
try:
    from colorama import Fore, Style, init
except ImportError:
    os.system("pkg install python -y")
    os.system("pip install --upgrade pip")
    os.system("pip install colorama")
    os.execv(sys.executable, [sys.executable] + sys.argv)

init(autoreset=True)
RED = Fore.RED + Style.BRIGHT
GREEN = Fore.GREEN + Style.BRIGHT
YELLOW = Fore.YELLOW + Style.BRIGHT
CYAN = Fore.CYAN + Style.BRIGHT
MAGENTA = Fore.MAGENTA + Style.BRIGHT
BLUE = Fore.BLUE + Style.BRIGHT
banner_colors = [RED, GREEN, YELLOW, CYAN, MAGENTA, BLUE]

# ------------------ PASSWORDS ------------------
owner_password = "aliponly1"
normal_password = "freeuser1234"

# ------------------ WiFi & Users ------------------
wifi_prefixes = ["Coffee","Home","Free","Guest","Office","Airport","Neighbor","Shop","Net"]
wifi_suffixes = ["WiFi","Network","Hotspot","Link","Net","Zone"]
wifi_security = ["(WPA2)","(WPA3)","(Open)","(WEP)"]
usernames = ["admin","guest","user","root","test","wifi"]
passwords = ["hunter123","password","12345678","letmein","qwerty","ilovecoding"]

# ------------------ HELPERS ------------------
def generate_wifi_networks(count=5):
    networks=[]
    for _ in range(count):
        name=f"{random.choice(wifi_prefixes)}{random.randint(1,99)}_{random.choice(wifi_suffixes)}"
        sec=random.choice(wifi_security)
        signal=random.randint(1,100)
        networks.append(f"{name} {sec} [Signal: {signal}%]")
    return networks

def banner():
    os.system("clear")
    color = random.choice(banner_colors)
    print(f"""{color}
__        __   _                            _         
\ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___   
 \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \  
  \ V  V /  __/ | (_| (_) | | | | | | |  __/ | || (_) | 
   \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/  
                                                      
{Fore.CYAN}                  >>> HACKING TOOLS <<<{Fore.RESET}
                   Made by Alip
""")

def back_to_menu(menu_func):
    choice = input(f"\n{GREEN}1) Back to Menu{Fore.RESET}\n{RED}0) Exit{Fore.RESET}\nChoose: ")
    if choice=="0": exit()
    menu_func()

# ------------------ FEATURES ------------------
def wifi_scan():
    networks = generate_wifi_networks()
    print(f"{CYAN}[*] Scanning WiFi...{Fore.RESET}")
    time.sleep(1)
    for i, net in enumerate(networks):
        print(f"{i+1}) {net}")
    back_to_menu(owner_menu if is_owner else normal_menu)

def brute_force():
    networks = generate_wifi_networks()
    print(f"{CYAN}[*] Available WiFi Networks:{Fore.RESET}")
    for i, net in enumerate(networks):
        print(f"{i+1}) {net}")
    try:
        choice=int(input(f"{YELLOW}Choose WiFi: {Fore.RESET}"))-1
        target=networks[choice]
    except:
        print(f"{RED}Invalid!{Fore.RESET}")
        back_to_menu(owner_menu if is_owner else normal_menu)
    user=random.choice(usernames)
    pwd=random.choice(passwords)
    for i in range(1,6):
        print(f"Trying username: {user}, password attempt {i}...")
        time.sleep(1)
    print(f"{GREEN}Password cracked! Username: {user}, Password: {pwd}{Fore.RESET}")
    with open("brute.log","a") as f:
        f.write(f"=== Brute Force Log {datetime.now()} ===\nTarget: {target}\nUsername: {user}\nPassword: {pwd}\n")
    back_to_menu(owner_menu if is_owner else normal_menu)

def system_info():
    print(f"{YELLOW}[*] System Info:{Fore.RESET}")
    print(f"OS: {os.name}, User: {os.getenv('USER')}")
    os.system("uname -r")
    os.system("uptime -p")
    back_to_menu(owner_menu if is_owner else normal_menu)

def pro_mode():
    print(f"{RED}PRO MODE! Press Ctrl+C to stop.{Fore.RESET}")
    try:
        while True:
            print(f"[PRO] {datetime.now()} :: Injecting packets...")
            time.sleep(0.2)
    except KeyboardInterrupt:
        print("Pro Mode stopped.")
    back_to_menu(owner_menu if is_owner else normal_menu)

def ddos_attack():
    target = input("Enter target IP/URL: ")
    print(f"{YELLOW}Simulating attack on {target}... Ctrl+C to stop{Fore.RESET}")
    count=0
    try:
        while True:
            pkt=random.randint(64,1500)
            port=random.randint(1,65535)
            line=f"[ATTACK] Sent {pkt} bytes to {target}:{port} | Total {count}"
            print(line)
            with open("ddos.log","a") as f: f.write(line+"\n")
            count+=1
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("DDoS stopped.")
    back_to_menu(owner_menu if is_owner else normal_menu)

def password_generator():
    length=input("Password length (default 12): ")
    try: length=int(length)
    except: length=12
    chars=string.ascii_letters+string.digits+"!@#$%^&*()"
    pwd="".join(random.choice(chars) for _ in range(length))
    print(f"{GREEN}Generated Password: {pwd}{Fore.RESET}")
    back_to_menu(owner_menu if is_owner else normal_menu)

def quick_connect():
    networks=generate_wifi_networks()
    for i, net in enumerate(networks): print(f"{i+1}) {net}")
    try:
        choice=int(input(f"{YELLOW}Choose WiFi to connect: {Fore.RESET}"))-1
        target=networks[choice]
    except: 
        print(f"{RED}Invalid!{Fore.RESET}"); back_to_menu(owner_menu if is_owner else normal_menu)
    print(f"{GREEN}Connecting to {target}...{Fore.RESET}")
    for _ in range(3): print("."); time.sleep(0.7)
    print(f"{GREEN}Connected!{Fore.RESET}")
    back_to_menu(owner_menu if is_owner else normal_menu)

def matrix_hack():
    columns = 50
    rows = 20
    try:
        while True:
            os.system("clear")
            for _ in range(rows):
                line = "".join(random.choice(string.ascii_letters + string.digits + "!@#$%^&*()") for _ in range(columns))
                print(line)
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("Matrix Hack stopped.")
    back_to_menu(owner_menu if is_owner else normal_menu)

def clear_logs():
    logs=[f for f in os.listdir() if f.endswith(".log")]
    for log in logs: os.remove(log)
    print(f"{GREEN}All logs cleared!{Fore.RESET}")
    back_to_menu(owner_menu if is_owner else normal_menu)

def ip_checker():
    host=input("Enter IP or website: ")
    print(f"{CYAN}Checking {host}...{Fore.RESET}")
    res = os.system(f"ping -c 1 {host} > /dev/null 2>&1")
    if res == 0:
        print(f"{GREEN}{host} is UP{Fore.RESET}")
    else:
        print(f"{RED}{host} is DOWN{Fore.RESET}")
    back_to_menu(owner_menu if is_owner else normal_menu)

def owner_only_feature():
    print(f"{CYAN}[*] Running special owner-only feature...{Fore.RESET}")
    time.sleep(1)
    print(f"{GREEN}Feature complete!{Fore.RESET}")
    back_to_menu(owner_menu)

# ------------------ MENUS ------------------
def normal_menu():
    banner()
    print("=== NORMAL MENU ===")
    print("1) WiFi Scan")
    print("2) Brute Force")
    print("3) Password Generator")
    print("4) Quick Connect")
    print("5) System Info")
    print("6) Pro Mode")
    print("7) DDoS Attack")
    print("8) Matrix Hack")
    print("9) Clear Logs")
    print("10) IP Checker")
    print("0) Exit")
    choice=input(f"{YELLOW}Choose: {Fore.RESET}")
    if choice=="1": wifi_scan()
    elif choice=="2": brute_force()
    elif choice=="3": password_generator()
    elif choice=="4": quick_connect()
    elif choice=="5": system_info()
    elif choice=="6": pro_mode()
    elif choice=="7": ddos_attack()
    elif choice=="8": matrix_hack()
    elif choice=="9": clear_logs()
    elif choice=="10": ip_checker()
    elif choice=="0": exit()
    else: print(f"{RED}Invalid!{Fore.RESET}"); time
